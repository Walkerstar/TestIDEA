package mcw.test.leetcode.bzhan;

/**
 * 在无限的平面上，机器人最初位于 (0, 0) 处，面朝北方。注意:
 * <p>
 * 北方向 是y轴的正方向。
 * 南方向 是y轴的负方向。
 * 东方向 是x轴的正方向。
 * 西方向 是x轴的负方向。
 * 机器人可以接受下列三条指令之一：
 * <p>
 * "G"：直走 1 个单位
 * "L"：左转 90 度
 * "R"：右转 90 度
 * 机器人按顺序执行指令 instructions，并一直重复它们。
 * <p>
 * 只有在平面中存在环使得机器人永远无法离开时，返回 true。否则，返回 false。
 * <p>
 * 示例 1：
 * <p>
 * 输入：instructions = "GGLLGG"
 * 输出：true
 * 解释：机器人最初在(0,0)处，面向北方。
 * “G”:移动一步。位置:(0,1)方向:北。
 * “G”:移动一步。位置:(0,2).方向:北。
 * “L”:逆时针旋转90度。位置:(0,2).方向:西。
 * “L”:逆时针旋转90度。位置:(0,2)方向:南。
 * “G”:移动一步。位置:(0,1)方向:南。
 * “G”:移动一步。位置:(0,0)方向:南。
 * 重复指令，机器人进入循环:(0,0)——>(0,1)——>(0,2)——>(0,1)——>(0,0)。
 * 在此基础上，我们返回true。
 * <p>
 * 提示：
 * <p>
 * 1 <= instructions.length <= 100
 * instructions[i] 仅包含 'G', 'L', 'R'
 *
 * @author mcw 2023/4/11 15:22
 */
public class leetCode1041 {


    /**
     * 方法一：模拟
     * 思路
     * <p>
     * 当机器人执行完指令 instructions 后，它的位置和方向均有可能发生变化。
     * <p>
     * 1.如果它的位置仍位于原点，那么不管它此时方向是什么，机器人都将永远无法离开。
     * <p>
     * 2.如果它的位置不在原点，那么需要考虑此时机器人的方向：
     * <p>
     * 2.1 如果机器人仍然朝北，那么机器人可以不会陷入循环。假设执行完一串指令后，机器人的位置是 (x, y) 且不为原点，方向仍然朝北，
     * 那么执行完第二串指令后，机器人的位置便成为 (2×x,2×y)，会不停地往外部移动，不会陷入循环。
     * 2.2 如果机器人朝南，那么执行第二串指令时，机器人的位移会与第一次相反，即第二次的位移是 (-x, -y)，并且结束后会回到原来的方向。
     * 这样一来，每两串指令之后，机器人都会回到原点，并且方向朝北，机器人会陷入循环。
     * 2.3 如果机器人朝东，即右转了 90°。这样一来，每执行一串指令，机器人都会右转 90°。
     * 那么第一次和第三次指令的方向是相反的，第二次和第四次指令的方向是相反的，位移之和也为 0，
     * 这样一来，每四次指令之后，机器人都会回到原点，并且方向朝北，机器人会陷入循环。
     * 如果机器人朝西，也是一样的结果。
     * 因此，机器人想要摆脱循环，在一串指令之后的状态，必须是不位于原点且方向朝北。
     */
    public boolean isRobotBounded(String instructions) {
        int[][] direc = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int directIndex = 0;
        int x = 0, y = 0;
        int n = instructions.length();
        for (int i = 0; i < n; i++) {
            char c = instructions.charAt(i);
            if (c == 'G') {
                x += direc[directIndex][0];
                y += direc[directIndex][1];
            } else if (c == 'L') {
                //向左转90°，如果下一步需要行动，则意味着 横坐标减一，纵坐标不变
                directIndex += 3;
                directIndex %= 4;
            } else {
                //向右转90°，如果下一步需要行动，则意味着 横坐标加一，纵坐标不变
                directIndex++;
                directIndex %= 4;
            }
        }
        return directIndex != 0 || (x == 0 && y == 0);
    }
}
