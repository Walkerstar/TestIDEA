package mcw.test.leetcode.bzhan;

import java.util.HashSet;
import java.util.Set;

/**
 * 机器人在一个无限大小的 XY 网格平面上行走，从点 (0, 0) 处开始出发，面向北方。该机器人可以接收以下三种类型的命令 commands ：
 * <p>
 * -2 ：向左转 90 度
 * -1 ：向右转 90 度
 * 1 <= x <= 9 ：向前移动 x 个单位长度
 * 在网格上有一些格子被视为障碍物 obstacles 。第 i 个障碍物位于网格点 obstacles[i] = (xi, yi) 。
 * <p>
 * 机器人无法走到障碍物上，它将会停留在障碍物的前一个网格方块上，但仍然可以继续尝试进行该路线的其余部分。
 * <p>
 * 返回从原点到机器人所有经过的路径点（坐标为整数）的最大欧式距离的平方。（即，如果距离为 5 ，则返回 25 ）
 * <p>
 * 注意：
 * <p>
 * 北表示 +Y 方向。
 * 东表示 +X 方向。
 * 南表示 -Y 方向。
 * 西表示 -X 方向。
 * <p>
 * 示例 1：
 * 输入：commands = [4,-1,3], obstacles = []
 * 输出：25
 * 解释：
 * 机器人开始位于 (0, 0)：
 * 1. 向北移动 4 个单位，到达 (0, 4)
 * 2. 右转
 * 3. 向东移动 3 个单位，到达 (3, 4)
 * 距离原点最远的是 (3, 4) ，距离为 32 + 42 = 25
 * <p>
 * 示例2：
 * 输入：commands = [4,-1,4,-2,4], obstacles = [[2,4]]
 * 输出：65
 * 解释：机器人开始位于 (0, 0)：
 * 1. 向北移动 4 个单位，到达 (0, 4)
 * 2. 右转
 * 3. 向东移动 1 个单位，然后被位于 (2, 4) 的障碍物阻挡，机器人停在 (1, 4)
 * 4. 左转
 * 5. 向北走 4 个单位，到达 (1, 8)
 * 距离原点最远的是 (1, 8) ，距离为 12 + 82 = 65
 * <p>
 * 提示：
 * <p>
 * 1 <= commands.length <= 10^4
 * commands[i] is one of the values in the list [-2,-1,1,2,3,4,5,6,7,8,9].
 * 0 <= obstacles.length <= 10^4
 * -3 * 10^4 <= xi, yi <= 3 * 10^4
 * 答案保证小于 2^31
 *
 * @author MCW 2023/7/19
 */
public class leetCode874 {

    /**
     * 方法一：哈希表
     * 思路与算法
     * <p>
     * 题目给出一个在点 (0,0) ，并面向北方的机器人。
     * 现在有一个大小为 n 的命令数组 commands 来操作机器人的移动，和一个大小为 m 的障碍物数组 obstacles。
     * 现在我们通过 commands 来模拟机器人的移动，并用一个哈希表来存储每一个障碍物放置点。
     * 当机器人的指令为向前移动时，我们尝试往前移动对应的次数——若往前一个单位不为障碍物放置点（即不在哈希表中），则机器人向前移动一个单位，
     * 否则机器人保持原位不变。
     * <p>
     * 在机器人移动的过程中记录从原点到机器人所有经过的整数路径点的最大欧式距离的平方即为最后的答案。
     * <p>
     * 在代码实现的过程中，对于机器人转向和向前移动的操作，我们可以用一个方向数组 dirs={[−1,0],[0,1],[1,0],[0,−1]} 来现实。
     * 若当前机器人的坐标为 (x,y)，当前方向的标号为 d，则往前移动一单位的操作为 x = x + dirs[d][0]， y = y + dirs[i][1]。
     * 向左转的操作为 d = (d + 3) mod 4，向右转的操作为 d = (d + 1) mod 4。
     */
    public int robotSim(int[] commands, int[][] obstacles) {
        // 左、上、右、下
        int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

        // 初始方向 向上，即 dirs[1] ,所以 d = 1
        int px = 0, py = 0, d = 1;

        // 存储障碍物的位置
        Set<Integer> set = new HashSet<>();
        for (int[] obstacle : obstacles) {
            // 哈希表存储 二元数的技巧 ，类似于 存储二维矩阵， x * row + y
            // 60001 根据 xi,yi 的范围得出
            set.add(obstacle[0] * 60001 + obstacle[1]);
        }
        int res = 0;
        for (int c : commands) {
            if (c < 0) {
                // 此处根据上面定义的 方向数组 来写
                d += c == -1 ? 1 : -1;
                d %= 4;
                // 面向左方，如果再往左转，即往下转
                if (d < 0) {
                    d += 4;
                }
                // 也可以写成
                // if (c == -2) {
                // 左转 90 度
                //     d = (d + 3) % 4;
                // } else if (c == -1) {
                // 右转 90 度
                //     d = (d + 1) % 4;
                // }
            } else {
                for (int i = 0; i < c; i++) {
                    // 碰到障碍物，就跳过
                    if (set.contains((px + dirs[d][0]) * 60001 + py + dirs[d][1])) {
                        break;
                    }
                    // 计算此时的坐标，并比较最大值
                    px += dirs[d][0];
                    py += dirs[d][1];
                    res = Math.max(res, px * px + py * py);
                }
            }
        }
        return res;
    }
}
