package mcw.test.leetcode.bzhan;

/**
 * 给你一个由正整数组成的整数数组 nums ，返回其中可被 3 整除的所有偶数的平均值。
 * <p>
 * 注意：n 个元素的平均值等于 n 个元素 求和 再除以 n ，结果 向下取整 到最接近的整数。
 * <p>
 * 示例 1：
 * <p>
 * 输入：nums = [1,3,6,10,12,15]
 * 输出：9
 * 解释：6 和 12 是可以被 3 整除的偶数。(6 + 12) / 2 = 9 。
 * <p>
 * 示例 2：
 * 输入：nums = [1,2,4,7,10]
 * 输出：0
 * 解释：不存在满足题目要求的整数，所以返回 0 。
 * <p>
 * 提示：
 * <p>
 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 1000
 *
 * @author MCW 2023/5/29
 */
public class leetCode2455 {

    /**
     * 方法一：遍历
     * 思路与算法
     * <p>
     * 题目给定正整数组成的整数数组 nums，返回其中可被 3 整除的所有偶数的平均值。被  3 整除的所有偶数，等价于  6 的倍数。
     * <p>
     * 遍历 nums 中的每一个数，判断是否除以 6 没有余数，没有余数即是  6 的倍数，累加到总和中。
     * <p>
     * 最后，返回求和后的平均数， k 个元素的平均值等于求和后除以  k，结果向下取整。如果不存在  6 的倍数，返回 0。
     */
    public int averageValue(int[] nums) {
        int total = 0;
        int k = 0;
        for (int a : nums) {
            if (a % 6 == 0) {
                total += a;
                k++;
            }
        }
        return k > 0 ? total / k : 0;
    }
}
