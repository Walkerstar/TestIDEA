package mcw.test.leetcode.bzhan;

/**
 * 给你一个正整数 num ，请你统计并返回 小于或等于 num 且各位数字之和为 偶数 的正整数的数目。
 * <p>
 * 正整数的 各位数字之和 是其所有位上的对应数字相加的结果。
 * <p>
 * 1 <= num <= 1000
 *
 * @author mcw 2023/1/6 14:50
 */
public class leetCode2180 {

    /**
     * 暴力枚举
     */
    public static int countEven(int num) {
        int res = 0;
        for (int i = 1; i <= num; i++) {
            int x = i, sum = 0;
            while (x != 0) {
                sum += x % 10;
                x /= 10;
            }
            if (sum % 2 == 0) {
                res++;
            }
        }
        return res;
    }

    /**
     * 方法二：数学
     * 首先有两个简单的数学结论：
     * <p>
     * 1.给定 0≤x<10，位于区间 [0, x] 内的偶数个数为 ⌊ x/2 ⌋+1，位于区间 [0, x] 内的奇数个数为 ⌈ x/2 ⌉。
     * 位于区间 [0, 10) 的奇数和偶数的个数都是 5 个。
     * <p>
     * 2.我们将 num 表示为 10×y+x 的形式，其中 0≤x<10 且 y≥0，那么位于区间 [0,num] 的整数可以分为两个部分：
     * <p>
     * 区间 [10×y+0,10×y+x]：
     * <p>
     * 1.如果 y 的各位数字之和为偶数，那么该区间内各位数字之和为偶数的整数个数为 ⌊ x/2 ⌋ + 1；
     * 2.如果 y 的各位数字之和为奇数，那么该区间内各位数字之和为偶数的整数个数为 ⌈ x/2 ⌉。
     * <p>
     * 区间 [0,10×y+0)：
     * <p>
     * 注意到该区间的数可以表示为 10×t+g 的形式，其中 0 ≤ g < 10。
     * 固定住 t 时，如果 t 的各位数字之和为偶数，那么 g 为偶数的取值数目为 5，奇数时类似，因此该区间内的各位数字之和为偶数的整数个数为 y×5。
     * <p>
     * 注意到上述区间中我们多计入了整数 0，因此结果应该是位于上述区间且各位数字之和为偶数的个数减 1。
     */
    public static int countEven2(int num) {
        /**
         * 因为每十个数中，数字和为奇偶的各五个。所以我们可以先算出 num 中有多少个 10 的倍数，然后乘以 5 再减去 1（排除 0 这个非正整数偶数），
         * 可以得到初始答案 ans=⌊ num /10 ⌋×5−1。
         *
         * 接下来，我们还需要考虑剩下的 num \% 10 + 1 个数字中，有多少个数的各位数字之和为偶数。这些数字是否是偶数，跟数字的前面数字之和有关，
         * 因此，我们可以算出 num 的前面数字之和 s，那么剩余的数字中，还有 ⌊ num%10+2−(s&1) / 2 ⌋ 个数的各位数字之和为偶数。
         * 累加到答案 ans 中即可。
         */
        int y = num / 10, x = num % 10;
        int res = y * 5, ySum = 0;
        //计算前面的数字之和，例如 num=127, 那么此时的 ySum=1+2=3
        while (y != 0) {
            ySum += y % 10;
            y /= 10;
        }
        //计算 120 ~ 127 之间的数字和为偶数的个数
        if (ySum % 2 == 0) {
            res += x / 2 + 1;
        } else {
            res += (x + 1) / 2;
        }
        return res - 1;
    }
}
