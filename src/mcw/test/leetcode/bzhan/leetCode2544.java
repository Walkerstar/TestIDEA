package mcw.test.leetcode.bzhan;

/**
 * 给你一个正整数 n 。n 中的每一位数字都会按下述规则分配一个符号：
 * <p>
 * 最高有效位 上的数字分配到 正 号。
 * 剩余每位上数字的符号都与其相邻数字相反。
 * 返回所有数字及其对应符号的和。
 * <p>
 * 示例 1：
 * 输入：n = 521
 * 输出：4
 * 解释：(+5) + (-2) + (+1) = 4
 * <p>
 * 示例 2：
 * 输入：n = 111
 * 输出：1
 * 解释：(+1) + (-1) + (+1) = 1
 * <p>
 * 示例 3：
 * 输入：n = 886996
 * 输出：0
 * 解释：(+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0
 * <p>
 * 提示：
 * <p>
 * 1 <= n <= 109
 *
 * @author MCW 2023/7/12
 */
public class leetCode2544 {

    /**
     * 方法一：数学
     * 思路与算法
     * <p>
     * 给你一个正整数 n，要求计算 n 的数字交替和。
     * <p>
     * 我们用 sign 来表示数字的正负，并初始化为 1。每一步中，我们将 n 对 10 取模，得到个位数字，把它和 sign 相乘求和，
     * 将 sign 取相反数，再把 n 除以 10。 不断重复这一步骤，直到 n 为零。这样我们就得到了数字交替和。
     * <p>
     * 最后，因为最高有效位上的数字分配到正号，我们将结果乘以  −sign 后返回。
     */
    public int alternateDigitSum(int n) {
        int res = 0, sign = 1;
        while (n > 0) {
            res += n % 10 * sign;
            sign = -sign;
            n /= 10;
        }
        return -sign * res;
    }
}
