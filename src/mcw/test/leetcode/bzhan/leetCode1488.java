package mcw.test.leetcode.bzhan;

import java.util.Arrays;
import java.util.HashMap;
import java.util.TreeSet;

/**
 * 你的国家有无数个湖泊，所有湖泊一开始都是空的。当第 n 个湖泊下雨前是空的，那么它就会装满水。如果第 n 个湖泊下雨前是 满的 ，这个湖泊会发生 洪水 。你的目标是避免任意一个湖泊发生洪水。
 * <p>
 * 给你一个整数数组 rains ，其中：
 * <p>
 * rains[i] > 0 表示第 i 天时，第 rains[i] 个湖泊会下雨。
 * rains[i] == 0 表示第 i 天没有湖泊会下雨，你可以选择 一个 湖泊并 抽干 这个湖泊的水。
 * 请返回一个数组 ans ，满足：
 * <p>
 * ans.length == rains.length
 * 如果 rains[i] > 0 ，那么ans[i] == -1 。
 * 如果 rains[i] == 0 ，ans[i] 是你第 i 天选择抽干的湖泊。
 * 如果有多种可行解，请返回它们中的 任意一个 。如果没办法阻止洪水，请返回一个 空的数组 。
 * <p>
 * 请注意，如果你选择抽干一个装满水的湖泊，它会变成一个空的湖泊。但如果你选择抽干一个空的湖泊，那么将无事发生。
 * <p>
 * 示例 1：
 * <p>
 * 输入：rains = [1,2,3,4]
 * 输出：[-1,-1,-1,-1]
 * 解释：第一天后，装满水的湖泊包括 [1]
 * 第二天后，装满水的湖泊包括 [1,2]
 * 第三天后，装满水的湖泊包括 [1,2,3]
 * 第四天后，装满水的湖泊包括 [1,2,3,4]
 * 没有哪一天你可以抽干任何湖泊的水，也没有湖泊会发生洪水。
 * <p>
 * 示例 2：
 * <p>
 * 输入：rains = [1,2,0,0,2,1]
 * 输出：[-1,-1,2,1,-1,-1]
 * 解释：第一天后，装满水的湖泊包括 [1]
 * 第二天后，装满水的湖泊包括 [1,2]
 * 第三天后，我们抽干湖泊 2 。所以剩下装满水的湖泊包括 [1]
 * 第四天后，我们抽干湖泊 1 。所以暂时没有装满水的湖泊了。
 * 第五天后，装满水的湖泊包括 [2]。
 * 第六天后，装满水的湖泊包括 [1,2]。
 * 可以看出，这个方案下不会有洪水发生。同时， [-1,-1,1,2,-1,-1] 也是另一个可行的没有洪水的方案。
 * <p>
 * 示例 3：
 * <p>
 * 输入：rains = [1,2,0,1,2]
 * 输出：[]
 * 解释：第二天后，装满水的湖泊包括 [1,2]。我们可以在第三天抽干一个湖泊的水。
 * 但第三天后，湖泊 1 和 2 都会再次下雨，所以不管我们第三天抽干哪个湖泊的水，另一个湖泊都会发生洪水。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= rains.length <= 10^5
 * 0 <= rains[i] <= 10^9
 *
 * @author MCW 2023/10/13
 */
public class leetCode1488 {

    /**
     * 方法一：贪心 + 二分查找
     * 思路与算法
     * <p>
     * 我们要思考如何在洪水即将发生时，有选择地对湖泊进行抽干操作。为了做到这一点，
     * 我们使用有序集合 st 来存储了那些在某些日期没有下雨的日子。
     * 这些晴天日子可以被用来在湖泊即将发生洪水时，有选择地抽干湖泊，从而阻止洪水的发生。
     * 有序集合 st 的排序方式是按照晴天日子的顺序排列的，这就确保了我们总是在最早的晴天日子中进行抽干操作，以最大程度地避免洪水的发生。
     * 对于最后剩余的晴天，我们可以将它们用于抽干任意一个湖泊，为了方便，我们令其为 1。
     * 现在我们初始化一个大小和 rains 一样的答案数组 ans，并初始化为 1，然后从左到右来遍历数组 rains：
     * <p>
     * 1. 若 rains[i]=0，则将 i 加入有序集合 st。
     * 2. 若 rains[i]>0，表示第 rains[i] 湖泊将下雨，令 ans[i]=−1 表示这一天的湖泊不可抽干：
     * 2.1 若第 rains[i] 是第一次下雨，则此时不会发生洪水。
     * 2.2 否则我们需要在有序集合 st 中找到大于等于该湖泊上一次下雨天数的最小索引 idx（可以用二分查找实现），
     * 如果 idx 不存在（即没有晴天可以用于抽干），此时不能避免洪水的发生，按照题目要求返回一个空数组。
     * 否则我们令 ans[idx]=rains[i]，并在 st 中删除 idx，表示我们会在第 idx 天抽干 rains[i] 湖泊的水来避免第 i 天洪水的发生。
     */
    public int[] avoidFlood(int[] rains) {
        int[] ans = new int[rains.length];
        Arrays.fill(ans, 1);
        var st = new TreeSet<Integer>();
        var mp = new HashMap<Integer, Integer>();
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] == 0) {
                st.add(i);
            } else {
                ans[i] = -1;
                if (mp.containsKey(rains[i])) {
                    Integer it = st.ceiling(mp.get(rains[i]));
                    if (it == null) {
                        return new int[0];
                    }
                    ans[it] = rains[i];
                    st.remove(it);
                }
                mp.put(rains[i], i);
            }
        }
        return ans;
    }
}
