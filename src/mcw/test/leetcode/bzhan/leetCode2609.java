package mcw.test.leetcode.bzhan;

/**
 * 给你一个仅由 0 和 1 组成的二进制字符串 s 。
 * <p>
 * 如果子字符串中 所有的 0 都在 1 之前 且其中 0 的数量等于 1 的数量，则认为 s 的这个子字符串是平衡子字符串。请注意，空子字符串也视作平衡子字符串。
 * <p>
 * 返回  s 中最长的平衡子字符串长度。
 * <p>
 * 子字符串是字符串中的一个连续字符序列。
 * <p>
 * 示例 1：
 * <p>
 * 输入：s = "01000111"
 * 输出：6
 * 解释：最长的平衡子字符串是 "000111" ，长度为 6 。
 * <p>
 * 示例 2：
 * <p>
 * 输入：s = "00111"
 * 输出：4
 * 解释：最长的平衡子字符串是 "0011" ，长度为  4 。
 * <p>
 * 示例 3：
 * <p>
 * 输入：s = "111"
 * 输出：0
 * 解释：除了空子字符串之外不存在其他平衡子字符串，所以答案为 0 。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= s.length <= 50
 * '0' <= s[i] <= '1'
 *
 * @author MCW 2023/11/8
 */
public class leetCode2609 {

    /**
     * 方法一：计数
     * 思路
     * <p>
     * 题目要求我们找到一个长度为偶数的最长的子字符串，这个子字符串前一半都为 ‘0’，后一半都为 ‘1’。
     * 我们可以遍历字符串，用一个长度为 2 的数组 count 记录下来遇到的连续的 ‘0’ 的个数和连续的 ‘1’ 的个数，并不断更新，更新规则如下：
     * <p>
     * 1. 如果遇到的为 ‘0’：
     * <p>
     * 1.1 如果遇到的这个 ‘0’ 是一个全 ‘0’ 子字符串的第一个 ‘0’（即是 s 的第一个字符或者这个 ‘0’ 前面的字符是 ‘1’），
     * 则把 count[0] 记为 1，把 count[1] 记为 0。
     * <p>
     * 1.2 否则的话，只更新 count[0]，将其自增 1。
     * <p>
     * 2. 如果遇到的为 ‘1’，只需要将 count[1] 自增 1，不需要改变 count[0] 的值。
     * 并且，此时的 ‘0’ 是一个平衡字符串的结尾，只需通过计算 2×min(count[0],count[1]) 来计算这个平衡字符串的长度。
     * 遍历时，不停更新平衡字符串的最大长度即可。
     */
    public int findTheLongestBalancedSubstring(String s) {
        int res = 0;
        int n = s.length();
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count[1]++;
                res = Math.max(res, 2 * Math.min(count[0], count[1]));
            } else if (i == 0 || s.charAt(i - 1) == '1') {
                count[0] = 1;
                count[1] = 0;
            } else {
                count[0]++;
            }
        }
        return res;
    }

}
