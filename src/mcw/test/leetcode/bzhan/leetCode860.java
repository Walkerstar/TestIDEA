package mcw.test.leetcode.bzhan;

/**
 * 在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
 * <p>
 * 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
 * <p>
 * 注意，一开始你手头没有任何零钱。
 * <p>
 * 给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。
 * <p>
 * 示例 1：
 * 输入：bills = [5,5,5,10,20]
 * 输出：true
 * 解释：
 * 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
 * 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
 * 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
 * 由于所有客户都得到了正确的找零，所以我们输出 true。
 * <p>
 * 示例 2：
 * 输入：bills = [5,5,10,10,20]
 * 输出：false
 * 解释：
 * 前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
 * 对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
 * 对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
 * 由于不是每位顾客都得到了正确的找零，所以答案是 false。
 * <p>
 * 提示：
 * <p>
 * 1 <= bills.length <= 10^5
 * bills[i] 不是 5 就是 10 或是 20
 *
 * @author MCW 2023/7/22
 */
public class leetCode860 {
    public boolean lemonadeChange(int[] bills) {
        int five = 0, ten = 0;
        // 依次收钱
        for (int bill : bills) {
            // 记录 收到多少 5块 的
            if (bill == 5) {
                five++;
            } else if (bill == 10) {
                // 收到 10块，准备找钱
                // 如果没有五块的，不能正确找零，返回 false
                if (five == 0) {
                    return false;
                }
                // 有，能正确找零，5块 数量 减一
                five--;
                // 10块 数量 加一
                ten++;
            } else {
                // 收到 20 块 ，
                // 如果 5块 和 10块 都有，找零 ，他们的数量减一
                if (five > 0 && ten > 0) {
                    five--;
                    ten--;
                } else if (five >= 3) {
                    // 如果没有10块，但是有3张五块，同样可以找零，5块数量减三
                    five -= 3;
                } else {
                    // 不能找零，返回false
                    return false;
                }
            }
        }
        return true;
    }
}
