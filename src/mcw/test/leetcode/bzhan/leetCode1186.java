package mcw.test.leetcode.bzhan;

/**
 * 给你一个整数数组，返回它的某个 非空 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。
 * 换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，
 * 然后该子数组（剩下）的元素总和是所有子数组之中最大的。
 * <p>
 * 注意，删除一个元素后，子数组 不能为空。
 * <p>
 * 示例 1：
 * 输入：arr = [1,-2,0,3]
 * 输出：4
 * 解释：我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。
 * <p>
 * 示例 2：
 * 输入：arr = [1,-2,-2,3]
 * 输出：3
 * 解释：我们直接选出 [3]，这就是最大和。
 * <p>
 * 示例 3：
 * 输入：arr = [-1,-1,-1,-1]
 * 输出：-1
 * 解释：最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。
 * 我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。
 * <p>
 * 提示：
 * <p>
 * 1 <= arr.length <= 10^5
 * -10^4 <= arr[i] <= 10^4
 *
 * @author MCW 2023/6/27
 */
public class leetCode1186 {

    /**
     * 方法一：动态规划
     * 本题是典型的动态规划应用题，我们可以将问题拆分成多个子问题，即求解以 arr[i] 结尾的最多删除一次的非空子数组的最大和。
     * 我们以 dp[i][k] 表示以 arr[i] 结尾，删除 k 次的非空子数组的最大和（删除前的末尾元素为  arr[i]，就视为以 arr[i] 结尾）。
     * <p>
     * 初始时  dp[0][0]=arr[0]， dp[0][1]＝0（以  arr[0] 结尾，删除一次的非空子数组不存在，因此 dp[0][1] 不会计入结果）。
     * <p>
     * 当  i>0 时，转移方程如下：<br>
     * dp[i][0]=max(dp[i−1][0],0)+arr[i] <br>
     * dp[i][1]=max(dp[i−1][1]+arr[i],dp[i−1][0])
     * <p>
     * 第一个转移方程表示在不删除的情况下，以  arr[i] 为结尾的非空子数组的最大和 dp[i][0] 与 dp[i－1][0] 有关，
     * 当 dp[i−1][0]>0 时，直接将  arr[i] 与  i−1 时的最大非空子数组连接时，取得最大和，否则只选 arr[i] 时，取得最大和。
     * <p>
     * 第二个转移方程表示在删除一次的情况下，以  arr[i] 为结尾的非空子数组有两种情况：
     * 1. 不删除  arr[i]，那么选择 arr[i] 与 dp[i−1][1] 对应的子数组（已执行一次删除）。
     * 2. 删除  arr[i]，那么选择 dp[i−1][0] 对应的非空子数组（未执行一次删除，但是等同于删除了  arr[i]）。
     * dp[i][1] 取以上两种情况的最大和的最大值。
     * <p>
     * 注意到  dp[i][∗] 的值只与  dp[i−1][∗] 有关，因此我们可以只使用两个整数来节省空间。
     */
    public int maximumSum(int[] arr) {
        int dp0 = arr[0], dp1 = 0, res = arr[0];
        for (int i = 1; i < arr.length; i++) {
            dp1 = Math.max(dp0, dp1 + arr[i]);
            dp0 = Math.max(dp0, 0) + arr[i];
            res = Math.max(res, Math.max(dp0, dp1));
        }
        return res;
    }
}
